# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: /Users/jakub.gardo/.sdkman/candidates/java/21-open/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: dev.jgardo.PatternMatchingBenchmark.ifElse

# Run progress: 0.00% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 483037512.029 ops/s
# Warmup Iteration   2: 514539271.751 ops/s
# Warmup Iteration   3: 555482129.214 ops/s
Iteration   1: 555853805.337 ops/s
Iteration   2: 556452084.182 ops/s
Iteration   3: 555434574.420 ops/s
Iteration   4: 555916853.151 ops/s
Iteration   5: 556249897.097 ops/s
Iteration   6: 553591174.550 ops/s
Iteration   7: 555873383.385 ops/s
Iteration   8: 553243787.447 ops/s
Iteration   9: 553255165.352 ops/s
Iteration  10: 559279084.416 ops/s


Result "dev.jgardo.PatternMatchingBenchmark.ifElse":
  555514980.934 ±(99.9%) 2758608.077 ops/s [Average]
  (min, avg, max) = (553243787.447, 555514980.934, 559279084.416), stdev = 1824648.441
  CI (99.9%): [552756372.857, 558273589.011] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21, OpenJDK 64-Bit Server VM, 21+35-2513
# VM invoker: /Users/jakub.gardo/.sdkman/candidates/java/21-open/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: dev.jgardo.PatternMatchingBenchmark.patternMatching

# Run progress: 50.00% complete, ETA 00:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 479368310.593 ops/s
# Warmup Iteration   2: 506904402.258 ops/s
# Warmup Iteration   3: 549742693.620 ops/s
Iteration   1: 550797439.921 ops/s
Iteration   2: 552021264.807 ops/s
Iteration   3: 555762358.736 ops/s
Iteration   4: 554492155.158 ops/s
Iteration   5: 552449422.066 ops/s
Iteration   6: 556844824.590 ops/s
Iteration   7: 556063001.971 ops/s
Iteration   8: 554422921.700 ops/s
Iteration   9: 554981390.893 ops/s
Iteration  10: 553519083.876 ops/s


Result "dev.jgardo.PatternMatchingBenchmark.patternMatching":
  554135386.372 ±(99.9%) 2915232.272 ops/s [Average]
  (min, avg, max) = (550797439.921, 554135386.372, 556844824.590), stdev = 1928245.648
  CI (99.9%): [551220154.100, 557050618.644] (assumes normal distribution)


# Run complete. Total time: 00:00:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  Mode  Cnt          Score         Error  Units
PatternMatchingBenchmark.ifElse           thrpt   10  555514980.934 ± 2758608.077  ops/s
PatternMatchingBenchmark.patternMatching  thrpt   10  554135386.372 ± 2915232.272  ops/s
